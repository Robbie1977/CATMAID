# Generated by Django 2.1.7 on 2019-02-20 18:16

import django.contrib.postgres.fields

from django.db import migrations, models


forward = """
    SELECT disable_history_tracking_for_table('nblast_similarity'::regclass,
            get_history_table_name('nblast_similarity'::regclass));

    ALTER TABLE nblast_similarity
    ADD COLUMN reverse bool DEFAULT FALSE NOT NULL;

    ALTER TABLE nblast_similarity__history
    ADD COLUMN reverse bool;

    ALTER TABLE nblast_similarity
    ADD COLUMN top_n integer DEFAULT 0;

    ALTER TABLE nblast_similarity__history
    ADD COLUMN top_n integer;

    ALTER TABLE nblast_similarity
    ADD COLUMN initial_query_objects bigint[];

    ALTER TABLE nblast_similarity__history
    ADD COLUMN initial_query_objects bigint[];

    ALTER TABLE nblast_similarity
    ADD COLUMN initial_target_objects bigint[];

    ALTER TABLE nblast_similarity__history
    ADD COLUMN initial_target_objects bigint[];

    -- All existing similarity results where not constrained by the top N limit.
    UPDATE nblast_similarity
    SET top_n = NULL;

    -- Update existing similarities and set there initial query objects from the
    -- existing query objects.
    UPDATE nblast_similarity SET initial_query_objects = query_objects,
        initial_target_objects = target_objects;

    SELECT enable_history_tracking_for_table('nblast_similarity'::regclass,
            get_history_table_name('nblast_similarity'::regclass), FALSE);
"""

backward = """
    SELECT disable_history_tracking_for_table('nblast_similarity'::regclass,
            get_history_table_name('nblast_similarity'::regclass));

    ALTER TABLE nblast_similarity
    DROP COLUMN reverse;

    ALTER TABLE nblast_similarity__history
    DROP COLUMN reverse;

    ALTER TABLE nblast_similarity
    DROP COLUMN top_n;

    ALTER TABLE nblast_similarity__history
    DROP COLUMN top_n;

    ALTER TABLE nblast_similarity
    DROP COLUMN initial_query_objects;

    ALTER TABLE nblast_similarity__history
    DROP COLUMN initial_query_objects;

    ALTER TABLE nblast_similarity
    DROP COLUMN initial_target_objects;

    ALTER TABLE nblast_similarity__history
    DROP COLUMN initial_target_objects;

    SELECT enable_history_tracking_for_table('nblast_similarity'::regclass,
            get_history_table_name('nblast_similarity'::regclass), FALSE);
"""


class Migration(migrations.Migration):

    dependencies = [
        ('catmaid', '0064_add_project_cascading_delete_constraints'),
    ]

    operations = [
        migrations.RunSQL(forward, backward, [
            migrations.AddField(
                model_name='nblastsimilarity',
                name='reverse',
                field=models.BooleanField(default=False),
            ),
            migrations.AddField(
                model_name='nblastsimilarity',
                name='top_n',
                field=models.IntegerField(blank=True, default=0, null=True),
            ),
            migrations.AddField(
                model_name='nblastsimilarity',
                name='initial_query_objects',
                field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=None, null=True, size=None),
            ),
            migrations.AddField(
                model_name='nblastsimilarity',
                name='initial_target_objects',
                field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=None, null=True, size=None),
            ),
            # Being able to store NULL values has been allowoed before and was
            # already the default on the database side. This is only to reflect
            # this in Django.
            migrations.AlterField(
                model_name='nblastsimilarity',
                name='query_objects',
                field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=None, null=True, size=None),
            ),
            migrations.AlterField(
                model_name='nblastsimilarity',
                name='target_objects',
                field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=None, null=True, size=None),
            ),
        ]),
    ]
